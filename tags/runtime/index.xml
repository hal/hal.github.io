<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>runtime on HAL Management Console</title><link>https://hal.github.io/tags/runtime/</link><description>Recent content in runtime on HAL Management Console</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 06 Feb 2024 14:01:23 +0100</lastBuildDate><atom:link href="https://hal.github.io/tags/runtime/index.xml" rel="self" type="application/rss+xml"/><item><title>What is new in HAL 3.1.2</title><link>https://hal.github.io/blog/whats-new-hal-312/</link><pubDate>Thu, 14 Feb 2019 08:30:25 +0200</pubDate><guid>https://hal.github.io/blog/whats-new-hal-312/</guid><description>HAL 3.1.2 is released and packaged as part of Wildfly 16 (which is in Candidate Release as of now and soon will release a Final).
HAL 3.1.2 brings many new features, bug fixes and enhancements, checkout the release notes since HAL 3.0.6, which is the version packaged in Wildfly 14 and 15.
The new and noteworthy features are:
Support socket log handler Show logs from logging-profile in log viewer Display microprofile health checks Expose CA management operations for key-store and certificate-authority-account Enhance the SSL Wizard to add support to LetsEncrypt CA Support runtime operations for messaging servers Add support to remote ActiveMQ server Display the the network open ports Show active management operation from hosts and servers in a central place Show unresponsive controller better Basic support to MicroProfile Metrics and Config If you find any problem, bug or have a suggestion on how to improve HAL, please open an issue or contact us.</description></item><item><title>Monitor active management operations and detect non-progressing operations</title><link>https://hal.github.io/blog/management-operations/</link><pubDate>Wed, 13 Feb 2019 08:30:25 +0200</pubDate><guid>https://hal.github.io/blog/management-operations/</guid><description>A management operation is when any api client that connects to the Wildfly kernel and run operations to read from a running server or write a configuration. Examples of a management operation:
Add a datasource. Deploy an application. Change the undertow buffer pool. A domain controller updates a slave server configuration. Host/Server synchronization. The following tasks are not management operations:
A HTTP request from a browser to a deployed application. An application sending a jms message.</description></item><item><title>Inspect HTTP Sessions</title><link>https://hal.github.io/blog/inspect-http-sessions/</link><pubDate>Thu, 19 Jul 2018 14:03:25 +0200</pubDate><guid>https://hal.github.io/blog/inspect-http-sessions/</guid><description>The undertow subsystem in deployments has been enhanced and provides new operations to inspect HTTP sessions.
Session Statistics To see session statistics please select a deployment under &amp;ldquo;Runtime / Server / Web / Deployment&amp;rdquo;. Besides the main attributes like deployment name and context path, the preview shows statistics for the number of active, expired and invalid sessions. Besides that you can see statistics about the session time.
Session Attributes If you select a deployment and press &amp;ldquo;View&amp;rdquo;, you can see more details about the deployment.</description></item><item><title>Log all configuration changes</title><link>https://hal.github.io/blog/configuration-changes/</link><pubDate>Tue, 17 Jul 2018 15:30:25 +0200</pubDate><guid>https://hal.github.io/blog/configuration-changes/</guid><description>There is a feature to record all configuration changes to an in-memory log per host or server, it records any change performed on Wildfly, for example: deploy an application, add a datasource, change any configuration, add any resource. This blog post will show how it works.
Notes:
For this blog post, domain mode will be used. After a domain or server restart all configuration changes are lost, because this is an in-memory logging.</description></item></channel></rss>